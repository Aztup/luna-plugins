import { trace, unloads } from "./init";

import { chunkArray } from "@inrixia/helpers";
import { redux, type ItemId } from "@luna/lib";
import { ContextMenu } from "@luna/unstable";

import { interceptActionResp } from "plugins/lib/src/redux";

const maxNewPlaylistSize = 450;

ContextMenu.onMediaItem(unloads, async ({ mediaCollection, contextMenu }) => {
	const itemCount = await mediaCollection.mediaItemsCount();
	if (itemCount === 0) return;

	const defaultText = itemCount > 1 ? `[RealMAX] Process ${itemCount} tracks` : "[RealMAX] Process track";

	const maxButton = contextMenu.addButton(defaultText, async () => {
		let trackIds: ItemId[] = [];
		const sourceTitle = await mediaCollection.title();
		maxButton.innerText = `[RealMAX] Loading...`;

		let maxItems = 0;
		for await (const mediaItem of await mediaCollection.mediaItems()) {
			const maxItem = await mediaItem.max();
			maxButton.innerText = `[RealMAX] ${trackIds.length}/${itemCount} done. Found ${maxItems} replacements`;
			if (maxItem === undefined) {
				trackIds.push(mediaItem.id);
				continue;
			}
			trackIds.push(maxItem.id);
			maxItems++;
			trace.msg.log(`Found Max quality for ${maxItem.title} in ${sourceTitle}!`);
		}
		if (trackIds.length !== itemCount) {
			return trace.msg.err(`Failed to create playlist "${sourceTitle}" item count mismatch ${trackIds.length} != ${itemCount}`);
		}
		const { playlist } = await redux.interceptActionResp(
			() =>
				redux.actions["folders/CREATE_PLAYLIST"]({
					description: "Automatically generated by RealMAX",
					folderId: "root",
					fromPlaylist: undefined,
					isPublic: false,
					title: `[RealMAX] ${sourceTitle}`,
					ids: trackIds.length > maxNewPlaylistSize ? undefined : trackIds,
				}),
			unloads,
			["content/LOAD_PLAYLIST_SUCCESS"],
			["content/LOAD_PLAYLIST_FAIL"]
		);
		if (trackIds.length > maxNewPlaylistSize) {
			for (const trackIdsChunk of chunkArray(trackIds, maxNewPlaylistSize)) {
				await interceptActionResp(
					() =>
						redux.actions["content/ADD_MEDIA_ITEMS_TO_PLAYLIST"]({
							addToIndex: -1,
							mediaItemIdsToAdd: trackIdsChunk,
							onDupes: "ADD",
							playlistUUID: playlist.uuid!,
						}),
					unloads,
					["content/ADD_MEDIA_ITEMS_TO_PLAYLIST_SUCCESS"],
					["content/ADD_MEDIA_ITEMS_TO_PLAYLIST_FAIL"]
				);
			}
		}
		if (playlist?.uuid === undefined) {
			return trace.msg.err(`Failed to create playlist "${sourceTitle}"`);
		}
		trace.msg.log(`Successfully created playlist "${sourceTitle}" - Found ${maxItems} replacements!`);
	});
});
