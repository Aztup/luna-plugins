import { actions } from "@neptune";
import { trace, unloads } from ".";

import { chunkArray } from "@inrixia/helpers";
import { ContextMenu, interceptPromise } from "@triton/lib";

import type { ItemId } from "neptune-types/tidal";
// import { hookContextMenu } from "neptune-types/api/hookContextMenu";

const maxNewPlaylistSize = 450;

unloads.add(
	ContextMenu.onMediaItem(async ({ mediaCollection, contextMenu }) => {
		const itemCount = await mediaCollection.mediaItemsCount();
		console.log(mediaCollection);
		if (itemCount === 0) return;

		const defaultText = itemCount > 1 ? `[RealMAX] Process ${itemCount} tracks` : "[RealMAX] Process track";

		const maxButton = contextMenu.addButton(defaultText, async () => {
			maxButton.onclick = null;
			let trackIds: ItemId[] = [];
			const sourceTitle = await mediaCollection.title();
			maxButton.textContent = `[RealMAX] Loading...`;
			for await (const mediaItem of await mediaCollection.mediaItems()) {
				const maxItem = await mediaItem.max();
				if (maxItem === undefined) {
					maxButton.textContent = `[RealMAX] ${trackIds.length}/${itemCount} done.`;
					continue;
				}
				trackIds.push(maxItem.id);
				trace.msg.log(`Found Max quality for ${maxItem.title} in ${sourceTitle}!`);
			}
			if (trackIds.length !== itemCount) {
				return trace.msg.err(`Failed to create playlist "${sourceTitle}" item count mismatch ${trackIds.length} != ${itemCount}`);
			}
			const { playlist } = await interceptPromise(
				() =>
					actions.folders.createPlaylist({
						description: "Automatically generated by RealMAX",
						folderId: "root",
						fromPlaylist: undefined,
						isPublic: false,
						title: `[RealMAX] ${sourceTitle}`,
						// @ts-expect-error This works lol
						ids: trackIds.length > maxNewPlaylistSize ? undefined : trackIds,
					}),
				["content/LOAD_PLAYLIST_SUCCESS"],
				["content/LOAD_PLAYLIST_FAIL"]
			);
			if (trackIds.length > maxNewPlaylistSize) {
				for (const trackIdsChunk of chunkArray(trackIds, maxNewPlaylistSize)) {
					await interceptPromise(
						() =>
							actions.content.addMediaItemsToPlaylist({
								addToIndex: -1,
								mediaItemIdsToAdd: trackIdsChunk,
								onDupes: "ADD",
								playlistUUID: playlist.uuid!,
							}),
						["content/ADD_MEDIA_ITEMS_TO_PLAYLIST_SUCCESS"],
						["content/ADD_MEDIA_ITEMS_TO_PLAYLIST_FAIL"]
					);
				}
			}
			if (playlist?.uuid === undefined) {
				return trace.msg.err(`Failed to create playlist "${sourceTitle}"`);
			}
			trace.msg.err(`Successfully created playlist "${sourceTitle}" - Found ${trackIds.length} replacements!`);
		});
	})
);
